<%#
 Copyright 2020-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
    /**
     * {@code POST  /<%= entityApiUrl %>/filter} : get all the <%= entityInstancePlural %>.
     * @param criteria the criteria which the requested entities should match.
     *<%_ if (hasPagination) { %>
     * @param pageRequest the pagination information.
    <%_ } _%>
     * @return the {@link Response} with status {@code 200 (OK)} and the list of <%= entityInstancePlural %> in body.
     */
    @POST
    <%_ if (databaseType === 'sql' && fieldsContainOwnerManyToMany && !viaService) { _%>
    @Transactional
    <%_ } _%>
    @Path("/filter")
    public Response getAllFiltered<%= entityClassPlural %>(<%= entityClass %>Criteria criteria<% if (hasPagination) { %>, @BeanParam PageRequestVM pageRequest<% if (reactive) { %>, ServerHttpRequest request<% } %><% } %>, @BeanParam SortRequestVM sortRequest, @Context UriInfo uriInfo) {
        log.debug("REST request to get <%= entityClassPlural %> by criteria: {}", criteria);
    <%_ if (pagination === 'no') { _%>
        List<<%= entityOrDtoClass %>> entityList = <%= entityInstance %>QueryService.findByCriteria(criteria);
        return Response.ok().entity(entityList).build();
    <%_ } else { _%>
        var page = pageRequest.toPage();
        var sort = sortRequest.toSort();
        Paged<<%= entityOrDtoClass%>> result = <%= entityInstance %>QueryService.findAllByCriteria(criteria, page, sort);
        var response = Response.ok().entity(result.content);
        response = PaginationUtil.withPaginationInfo(response, uriInfo, result);
        return response.build();
    <%_ } _%>
    }

    /**
     * {@code GET  /<%= entityApiUrl %>/count} : count all the <%= entityInstancePlural %>.
     *
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link Response} with status {@code 200 (OK)} and the count in body.
    */
    @POST
    @Path("/filter/count")
    public Response count<%= entityClassPlural %>(<%= entityClass %>Criteria criteria) {
        log.debug("REST request to count <%= entityClassPlural %> by criteria: {}", criteria);
        return Response.ok().entity(<%= entityInstance %>QueryService.countByCriteria(criteria)).build();
    }
