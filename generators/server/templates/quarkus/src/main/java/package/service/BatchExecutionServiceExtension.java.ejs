package <%=packageName%>.service;

import <%=packageName%>.provider.BatchExecutionServicesProvider;
import <%=packageName%>.service.dto.*;
import <%=packageName%>.service.filtering.Criteria;
import <%=packageName%>.service.filtering.filter.LongFilter;
import <%=packageName%>.service.filtering.filter.StringFilter;
import <%=packageName%>.service.mapper.EntityMapper;
import <%=packageName%>.service.exception.BatchExecutionException;
import io.quarkus.panache.common.Page;
import io.quarkus.panache.common.Sort;

import java.util.*;

/**
* Декоратор, расширяющий возможности пакетного обновления объектов
*/
public class BatchExecutionServiceExtension<T> implements BatchExecutionServiceInterface<T> {

    private static final int PAGE_SIZE = 50;

    private final BatchExecutionServiceInterface<T> serviceInterface;

    private final String objectName;

    BatchExecutionServicesProvider servicesProvider;

    CriteriaFactory criteriaFactory;

    TranslationQueryService translationQueryService;

    public BatchExecutionServiceExtension(BatchExecutionServiceInterface<T> serviceInterface, String objectName,
        BatchExecutionServicesProvider servicesProvider, CriteriaFactory criteriaFactory,
        TranslationQueryService translationQueryService) {
        this.serviceInterface = serviceInterface;
        this.objectName = objectName;
        this.servicesProvider = servicesProvider;
        this.criteriaFactory = criteriaFactory;
        this.translationQueryService = translationQueryService;
    }

    public Paged<T> findAll(Page page) {
        return serviceInterface.findAll(page);
    }

    public T partialUpdate(BaseDTO entityDTO) {
        T foundEntityDTO = serviceInterface.findOne(entityDTO.getId()).orElse(null);
        if (foundEntityDTO == null ) {
        return null;
        }

        EntityMapper objectMapper = servicesProvider.getMapper(objectName);
        Object foundEntity = objectMapper.toEntity(foundEntityDTO);
        objectMapper.partialUpdate(foundEntity, entityDTO);

        return serviceInterface.persistOrUpdate((T) objectMapper.toDto(foundEntity));
    }

    public T readEnum(EnumDTO enumDTO) {
        EnumCriteria enumCriteria = (EnumCriteria) criteriaFactory.createCriteria(objectName);
        StringFilter codeFilter = new StringFilter();
        codeFilter.setEquals(enumDTO.code);
        enumCriteria.setCode(codeFilter);
        return readEnum(enumCriteria, null).content.stream()
            .findFirst().orElse(null);
    }

    public Paged<T> readEnum(EnumCriteria enumCriteria, String locale) {
        try {
            BatchExecutionQueryServiceInterface objectQueryService = servicesProvider.getQueryService(objectName);
            return objectQueryService
                .findAllByCriteria(enumCriteria, Page.of(0, 50), Sort.by("code"))
                .map(enumDTO -> translateEnum((EnumDTO) enumDTO, locale));
        } catch (NoSuchElementException e) {
            throw new BatchExecutionException(String.format("Enum with name %s is not found by criteria %s", objectName, enumCriteria));
        }
    }

    public List<T> searchByCriteria(Criteria criteria) {
        BatchExecutionQueryServiceInterface queryService = servicesProvider.getQueryService(objectName);
        return queryService.findAllByCriteria(criteria, null);
    }

    public long deleteByIdCriteria(BaseCriteria criteria) {
        if (criteria.getId() == null || criteria.getId().getIn() == null) {
            return 0L;
        }
        criteria.getId().getIn().forEach(serviceInterface::delete);
        return criteria.getId().getIn().size();
    }

    public Map<String, Object> deleteByCriteria(Criteria criteria) {
        BatchExecutionQueryServiceInterface queryService = servicesProvider.getQueryService(objectName);
        return Collections.singletonMap("count", queryService.deleteByCriteria(criteria));
    }

    public void deletePrimitiveList(PrimitiveListRequestDTO primitiveListRequestDTO) {
        BatchExecutionServiceExtension batchExecutionServiceExtension = servicesProvider.getServiceExtension(objectName);
        BatchExecutionQueryServiceInterface primitiveListQueryService = servicesProvider.getQueryService(objectName);
        PrimitiveListCriteria primitiveListCriteria = (PrimitiveListCriteria) criteriaFactory.createCriteria(objectName);

        StringFilter entityNameFilter = new StringFilter();
        entityNameFilter.setEquals(primitiveListRequestDTO.entityName);
        primitiveListCriteria.setEntityName(entityNameFilter);

        StringFilter entityIdFilter = new StringFilter();
        entityIdFilter.setEquals(primitiveListRequestDTO.entityId);
        primitiveListCriteria.setEntityId(entityIdFilter);

        StringFilter fieldNameFilter = new StringFilter();
        fieldNameFilter.setEquals(primitiveListRequestDTO.fieldName);
        primitiveListCriteria.setFieldName(fieldNameFilter);

        long pageCount = primitiveListQueryService.findAllByCriteria(primitiveListCriteria, Page.of(0, PAGE_SIZE), Sort.by("entityName")).pageCount;
        for (long page = 0; page < pageCount; page++) {
            primitiveListQueryService
                .findAllByCriteria(primitiveListCriteria, Page.of(0, PAGE_SIZE), Sort.by("entityName"))
                .content.forEach(it -> batchExecutionServiceExtension.delete(((BaseDTO) it).getId()));
        }
    }

    @Override
    public T persistOrUpdate(Object o) {
        return serviceInterface.persistOrUpdate((T) o);
    }

    @Override
    public T persist(Object o) {
        return serviceInterface.persist((T) o);
    }

    @Override
    public Optional<T> findOne(Long id) {
        return serviceInterface.findOne(id);
    }

    @Override
    public void delete(Long id) {
        serviceInterface.delete(id);
    }

    private EnumDTO translateEnum(EnumDTO enumDTO, String locale) {
        if (enumDTO == null || locale == null) {
            return enumDTO;
        }
        TranslationCriteria translationCriteria = new TranslationCriteria();
        LongFilter localizedStringIdFilter = new LongFilter();
        localizedStringIdFilter.setEquals(enumDTO.labelId);
        translationCriteria.setLocalizedStringId(localizedStringIdFilter);
        StringFilter localeFilter = new StringFilter();
        localeFilter.setEquals(locale);
        translationCriteria.setLocale(localeFilter);
        enumDTO.label = translationQueryService.findAllByCriteria(translationCriteria, null).stream()
            .findFirst()
            .map(translationDTO -> translationDTO.label)
            .orElse(String.format("%s[%s]", enumDTO.code, locale));
        return enumDTO;
    }
}
