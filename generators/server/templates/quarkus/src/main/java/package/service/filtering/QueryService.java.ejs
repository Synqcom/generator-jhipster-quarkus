package <%= packageName %>.service.filtering;

import <%= packageName %>.service.filtering.filter.Filter;
import <%= packageName %>.service.filtering.filter.RangeFilter;
import <%= packageName %>.service.filtering.filter.StringFilter;
import io.quarkus.panache.common.Sort;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.criteria.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class QueryService<E> {

    @Inject
    protected EntityManager entityManager;

    protected <X> Predicate buildCriteria(Filter<X> filter, Expression<X> expression) {
        if (filter.getEquals() != null) {
            return equalsPredicate(expression, filter.getEquals());
        } else if (filter.getIn() != null) {
            return valueIn(expression, filter.getIn());
        } else if (filter.getNotIn() != null) {
            return valueNotIn(expression, filter.getNotIn());
        } else if (filter.getNotEquals() != null) {
            return notEqualsPredicate(expression, filter.getNotEquals());
        } else if (filter.getSpecified() != null) {
            return byFieldSpecified(expression, filter.getSpecified());
        }
        return null;
    }

    protected <X> Predicate buildStringCriteria(StringFilter filter, Expression<String> expression) {
        if (filter.getEquals() != null) {
            return equalsPredicate(expression, filter.getEquals());
        } else if (filter.getIn() != null) {
            return valueIn(expression, filter.getIn());
        } else if (filter.getNotIn() != null) {
            return valueNotIn(expression, filter.getNotIn());
        } else if (filter.getContains() != null) {
            return containsPredicate(expression, filter.getContains());
        } else if (filter.getDoesNotContain() != null) {
            return doesNotContainPredicate(expression, filter.getDoesNotContain());
        } else if (filter.getStartsWith() != null) {
            return startsWithPredicate(expression, filter.getStartsWith());
        } else if (filter.getDoesNotStartWith() != null) {
            return doesNotStartWithPredicate(expression, filter.getDoesNotStartWith());
        } else if (filter.getEndsWith() != null) {
            return endsWithPredicate(expression, filter.getEndsWith());
        } else if (filter.getDoesNotEndWith() != null) {
            return doesNotEndWithPredicate(expression, filter.getDoesNotEndWith());
        } else if (filter.getLike() != null) {
            return likePredicate(expression, filter.getLike());
        } else if (filter.getNotLike() != null) {
            return notLikePredicate(expression, filter.getNotLike());
        } else if (filter.getNotEquals() != null) {
            return notEqualsPredicate(expression, filter.getNotEquals());
        } else if (filter.getSpecified() != null) {
            return byFieldSpecified(expression, filter.getSpecified());
        }
        return null;
    }

    protected <X extends Comparable<? super X>> Predicate buildRangeCriteria(RangeFilter<X> filter, Expression<X> expression) {
        return buildCriteria(filter, expression);
    }

    protected <X extends Comparable<? super X>> Predicate buildCriteria(RangeFilter<X> filter, Expression<X> expression) {
        if (filter.getEquals() != null) {
            return equalsPredicate(expression, filter.getEquals());
        } else if (filter.getIn() != null) {
            return valueIn(expression, filter.getIn());
        }

        List<Predicate> predicates = new ArrayList<>();
        if (filter.getSpecified() != null) {
            predicates.add(byFieldSpecified(expression, filter.getSpecified()));
        }
        if (filter.getNotEquals() != null) {
            predicates.add(notEqualsPredicate(expression, filter.getNotEquals()));
        }
        if (filter.getNotIn() != null) {
            predicates.add(valueNotIn(expression, filter.getNotIn()));
        }
        if (filter.getGreaterThan() != null) {
            predicates.add(greaterThan(expression, filter.getGreaterThan()));
        }
        if (filter.getGreaterThanOrEqual() != null) {
            predicates.add(greaterThanOrEqualTo(expression, filter.getGreaterThanOrEqual()));
        }
        if (filter.getLessThan() != null) {
            predicates.add(lessThan(expression, filter.getLessThan()));
        }
        if (filter.getLessThanOrEqual() != null) {
            predicates.add(lessThanOrEqualTo(expression, filter.getLessThanOrEqual()));
        }

        return entityManager.getCriteriaBuilder().and(predicates.toArray(new Predicate[0]));
    }

    protected <X> Predicate equalsPredicate(Expression<X> expression, final X value) {
        return entityManager.getCriteriaBuilder().equal(expression, value);
    }

    protected <X> Predicate notEqualsPredicate(Expression<X> expression, final X value) {
        return entityManager.getCriteriaBuilder().notEqual(expression, value);
    }

    protected Predicate likeUpperPredicate(Expression<String> expression, final String value) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        return cb.like(cb.upper(expression), value);
    }

    protected Predicate containsPredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, wrapLikeQuery(value));
    }

    protected Predicate doesNotContainPredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, wrapLikeQuery(value)).not();
    }

    protected Predicate startsWithPredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, beginMatchesLikeQuery(value));
    }

    protected Predicate doesNotStartWithPredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, beginMatchesLikeQuery(value)).not();
    }

    protected Predicate endsWithPredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, endMatchesLikeQuery(value));
    }

    protected Predicate doesNotEndWithPredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, endMatchesLikeQuery(value)).not();
    }

    protected Predicate likePredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, value.toUpperCase());
    }

    protected Predicate notLikePredicate(Expression<String> expression, final String value) {
        return likeUpperPredicate(expression, value.toUpperCase()).not();
    }

    protected <X> Predicate valueIn(Expression<X> expression, final Collection<X> value) {
        CriteriaBuilder.In<X> in = entityManager.getCriteriaBuilder().in(expression);
        value.forEach(in::value);
        return in;
    }

    protected <X> Predicate valueNotIn(Expression<X> expression, final Collection<X> values) {
        return this.valueIn(expression, values).not();
    }

    protected <X> Predicate byFieldSpecified(Expression<X> expression, final boolean specified) {
        return specified ?
            entityManager.getCriteriaBuilder().isNotNull(expression) :
            entityManager.getCriteriaBuilder().isNull(expression);
    }

    protected <X> Predicate byFieldEmptiness(Expression<Set<X>> expression, final boolean specified) {
        return specified ?
            entityManager.getCriteriaBuilder().isNotEmpty(expression) :
            entityManager.getCriteriaBuilder().isEmpty(expression);
    }

    protected <X extends Comparable<? super X>> Predicate greaterThanOrEqualTo(Expression<X> expression, final X value) {
        return entityManager.getCriteriaBuilder().greaterThanOrEqualTo(expression, value);
    }

    protected <X extends Comparable<? super X>> Predicate greaterThan(Expression<X> expression, final X value) {
        return entityManager.getCriteriaBuilder().greaterThan(expression, value);
    }

    protected <X extends Comparable<? super X>> Predicate lessThanOrEqualTo(Expression<X> expression, final X value) {
        return entityManager.getCriteriaBuilder().lessThanOrEqualTo(expression, value);
    }

    protected <X extends Comparable<? super X>> Predicate lessThan(Expression<X> expression, final X value) {
        return entityManager.getCriteriaBuilder().lessThan(expression, value);
    }

    protected String wrapLikeQuery(String txt) {
        return "%" + txt.toUpperCase() + '%';
    }

    protected String endMatchesLikeQuery(String txt) {
        return "%" + txt.toUpperCase();
    }

    protected String beginMatchesLikeQuery(String txt) {
        return txt.toUpperCase() + '%';
    }

    protected <T>List<Order> createOrderBy(Sort sort, Root<T> root) {
        if (sort == null) {
            return new ArrayList<>();
        }
        return sort.getColumns().stream().map(column -> {
            if (Sort.Direction.Descending.equals(column.getDirection())) {
                return entityManager.getCriteriaBuilder().desc(root.get(column.getName()));
            } else {
                return entityManager.getCriteriaBuilder().asc(root.get(column.getName()));
            }
        }).collect(Collectors.toList());
    }
}
