package <%=packageName%>.service;

import <%=packageName%>.provider.BatchExecutionServicesProvider;
import <%=packageName%>.service.dto.*;
import <%=packageName%>.service.mapper.BatchExecutionMapper;
import <%=packageName%>.service.mapper.PrimitiveListMapper;
import <%=packageName%>.service.util.ClassUtil;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.json.bind.Jsonb;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;

/**
 * Сервис для пакетной модификации объектов
 */
@ApplicationScoped
public class BatchExecutionService {

    @Inject
    BatchExecutionServicesProvider servicesProvider;

    @Inject
    Jsonb jsonb;

    @Inject
    BatchExecutionMapper batchExecutionMapper;

    /**
     * Выполнение пакетной модификации объектов
     * @param batchExecutionRequests список запросов для модификации объектов
     * @return список модифицированных объектов
     */
    @Transactional
    public List<BatchExecutionResponseDTO> batchExecution(List<BatchExecutionRequestDTO> batchExecutionRequests) {
        List<BatchExecutionResponseDTO> responseDTOList = new ArrayList<>();
        for (BatchExecutionRequestDTO request : batchExecutionRequests) {
            BatchExecutionServiceExtension batchExecutionServiceExtension = servicesProvider.getServiceExtension(request.objectName);
            BaseDTO data = (BaseDTO) jsonb.fromJson(request.data, ClassUtil.getClass(ClassUtil.DTO_CLASS_PATH, request.objectName + "DTO"));
            Object responseData = null;
            if (ActionType.CREATE.equals(request.actionType) || ActionType.UPDATE.equals(request.actionType)) {
                responseData = batchExecutionServiceExtension.persistOrUpdate(data);
            } else if (ActionType.PARTIAL_UPDATE.equals(request.actionType)) {
                responseData = batchExecutionServiceExtension.partialUpdate(data);
            } else if (ActionType.DELETE.equals(request.actionType)) {
            batchExecutionServiceExtension.delete(data.getId());
            } else if (ActionType.READ_ENUM.equals(request.actionType)) {
                EnumDTO enumDTO = jsonb.fromJson(request.data, EnumDTO.class);
                responseData = batchExecutionServiceExtension.readEnum(enumDTO);
            } else if (ActionType.CREATE_PRIMITIVE_LIST.equals(request.actionType)) {
                PrimitiveListRequestDTO primitiveListRequestDTO = jsonb.fromJson(request.data, PrimitiveListRequestDTO.class);
                responseData = createPrimitiveList(primitiveListRequestDTO, request.objectName, batchExecutionServiceExtension);
            } else if (ActionType.UPDATE_PRIMITIVE_LIST.equals(request.actionType)) {
                PrimitiveListRequestDTO primitiveListRequestDTO = jsonb.fromJson(request.data, PrimitiveListRequestDTO.class);
            batchExecutionServiceExtension.deletePrimitiveList(primitiveListRequestDTO);
                responseData = createPrimitiveList(primitiveListRequestDTO, request.objectName, batchExecutionServiceExtension);
            }
            BatchExecutionResponseDTO response = batchExecutionMapper.toBatchExecutionResponseDTO(request, responseData);
            responseDTOList.add(response);
        }
        return responseDTOList;
    }

    private List<Object> createPrimitiveList(PrimitiveListRequestDTO primitiveListRequestDTO, String objectName, BatchExecutionServiceExtension batchExecutionServiceExtension) {
        PrimitiveListMapper primitiveListMapper = (PrimitiveListMapper) servicesProvider.getMapper(objectName);
        List<Object> primitiveResponse = new ArrayList<>();
        for (Object value: primitiveListRequestDTO.values) {
            Object objectDTO = primitiveListMapper.toPrimitiveRecordDto(primitiveListRequestDTO, value);
            Object response = batchExecutionServiceExtension.persistOrUpdate(objectDTO);
            primitiveResponse.add(response);
        }
        return primitiveResponse;
    }
}

