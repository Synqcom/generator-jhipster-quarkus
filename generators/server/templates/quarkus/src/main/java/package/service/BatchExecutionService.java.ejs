package <%=packageName%>.service;

import <%=packageName%>.provider.BatchExecutionServicesProvider;
import <%=packageName%>.service.dto.*;
import <%=packageName%>.service.filtering.Criteria;
import <%=packageName%>.service.mapper.BatchExecutionMapper;
import <%=packageName%>.service.mapper.PrimitiveListMapper;
import <%=packageName%>.service.util.ClassUtil;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.json.bind.Jsonb;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Сервис для пакетной модификации объектов
 */
@ApplicationScoped
public class BatchExecutionService {

    @Inject
    BatchExecutionServicesProvider servicesProvider;

    @Inject
    Jsonb jsonb;

    @Inject
    BatchExecutionMapper batchExecutionMapper;

    /**
     * Выполнение пакетной модификации объектов
     * @param batchExecutionRequests список запросов для модификации объектов
     * @return список модифицированных объектов
     */
    @Transactional
    public List<BatchExecutionResponseDTO> batchExecution(List<BatchExecutionRequestDTO> batchExecutionRequests) {
        List<BatchExecutionResponseDTO> responseDTOList = new ArrayList<>();
        for (BatchExecutionRequestDTO request : batchExecutionRequests) {
            BatchExecutionServiceExtension batchExecutionServiceExtension = servicesProvider.getServiceExtension(request.objectName);
            Object responseData = null;
            if (ActionType.CREATE.equals(request.actionType)) {
                responseData = batchExecutionServiceExtension.persist(createBaseDTO(request));
            } else if (ActionType.UPDATE.equals(request.actionType)) {
                responseData = batchExecutionServiceExtension.persistOrUpdate(createBaseDTO(request));
            } else if (ActionType.PARTIAL_UPDATE.equals(request.actionType)) {
                responseData = batchExecutionServiceExtension.partialUpdate(createBaseDTO(request));
            } else if (ActionType.READ_OBJECT.equals(request.actionType)) {
                responseData = batchExecutionServiceExtension.findOne(createBaseDTO(request).getId()).orElse(null);
            } else if (ActionType.DELETE.equals(request.actionType)) {
                batchExecutionServiceExtension.delete(createBaseDTO(request).getId());
                responseData = Collections.singletonMap("id", createBaseDTO(request).getId());
            } else if (ActionType.READ_ENUM.equals(request.actionType)) {
                EnumDTO enumDTO = jsonb.fromJson(request.data, EnumDTO.class);
                responseData = batchExecutionServiceExtension.readEnum(enumDTO);
            } else if (ActionType.CREATE_PRIMITIVE_LIST.equals(request.actionType)) {
                PrimitiveListRequestDTO primitiveListRequestDTO = jsonb.fromJson(request.data, PrimitiveListRequestDTO.class);
                responseData = createPrimitiveList(primitiveListRequestDTO, request.objectName, batchExecutionServiceExtension);
            } else if (ActionType.UPDATE_PRIMITIVE_LIST.equals(request.actionType)) {
                PrimitiveListRequestDTO primitiveListRequestDTO = jsonb.fromJson(request.data, PrimitiveListRequestDTO.class);
                batchExecutionServiceExtension.deletePrimitiveList(primitiveListRequestDTO);
                responseData = createPrimitiveList(primitiveListRequestDTO, request.objectName, batchExecutionServiceExtension);
            } else if (ActionType.CRITERIA_SEARCH.equals(request.actionType)) {
                Criteria criteria = (Criteria) jsonb.fromJson(request.data, ClassUtil.getClass(ClassUtil.CRITERIA_CLASS_PATH, request.objectName + "Criteria"));
                responseData = batchExecutionServiceExtension.searchByCriteria(criteria);
            } else if (ActionType.CRITERIA_DELETE.equals(request.actionType)) {
                Criteria criteria = (Criteria) jsonb.fromJson(request.data, ClassUtil.getClass(ClassUtil.CRITERIA_CLASS_PATH, request.objectName + "Criteria"));
                batchExecutionServiceExtension.deleteByCriteria(criteria);
            } else if (ActionType.ID_CRITERIA_DELETE.equals(request.actionType)) {
                BaseCriteria criteria = (BaseCriteria) jsonb.fromJson(request.data, ClassUtil.getClass(ClassUtil.CRITERIA_CLASS_PATH, request.objectName + "Criteria"));
                long result = batchExecutionServiceExtension.deleteByIdCriteria(criteria);
                if (result == 0) {
                    responseData = new ArrayList<>();
                } else {
                    responseData = criteria.getId().getIn().stream()
                        .map(id -> Collections.singletonMap("id", id)).collect(Collectors.toList());
                }
            }
            BatchExecutionResponseDTO response = batchExecutionMapper.toBatchExecutionResponseDTO(request, responseData);
            responseDTOList.add(response);
        }
        return responseDTOList;
    }

    private BaseDTO createBaseDTO(BatchExecutionRequestDTO request) {
        return (BaseDTO) jsonb.fromJson(request.data, ClassUtil.getClass(ClassUtil.DTO_CLASS_PATH, request.objectName + "DTO"));
    }

    private List<Object> createPrimitiveList(PrimitiveListRequestDTO primitiveListRequestDTO, String objectName, BatchExecutionServiceExtension batchExecutionServiceExtension) {
        PrimitiveListMapper primitiveListMapper = (PrimitiveListMapper) servicesProvider.getMapper(objectName);
        List<Object> primitiveResponse = new ArrayList<>();
        for (Object value: primitiveListRequestDTO.values) {
            Object objectDTO = primitiveListMapper.toPrimitiveRecordDto(primitiveListRequestDTO, value);
            Object response = batchExecutionServiceExtension.persistOrUpdate(objectDTO);
            primitiveResponse.add(response);
        }
        return primitiveResponse;
    }
}

