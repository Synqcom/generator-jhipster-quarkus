<%#
 Copyright 2020-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
application.name=<%= baseName %>

<%_ if(databaseType !== 'no') { _%>
<%- include('../../../partials/data_application.properties.ejs', { baseName: baseName, BUILD_DIR: BUILD_DIR, devDatabaseType:devDatabaseType, prodDatabaseType: prodDatabaseType}) -%>
<%_ } _%>
<% if(cacheManagerIsAvailable) { %>
<%- include('../../../partials/cache_application.properties.ejs') -%>
<% } %>

quarkus.mailer.from=<%= dasherizedBaseName %>@localhost
quarkus.mailer.host=localhost
quarkus.mailer.port=25
quarkus.mailer.ssl=false
quarkus.mailer.username=
quarkus.mailer.password=

quarkus.micrometer.export.prometheus.enabled=true

<%_ if(httpRootPath) { _%>
quarkus.smallrye-health.root-path=/<%= httpRootPath %>/management/health
quarkus.micrometer.export.prometheus.path=/<%= httpRootPath %>/management/prometheus
<%_ } else { _%>
quarkus.smallrye-health.root-path=/management/health
quarkus.micrometer.export.prometheus.path=/management/prometheus
<%_ } _%>

<%_ if (authenticationType === 'jwt') { _%>
mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem
mp.jwt.verify.issuer=https://www.jhipster.tech
quarkus.smallrye-jwt.enabled=true

jhipster.security.authentication.jwt.private-key.location=/jwt/privateKey.pem
jhipster.security.authentication.jwt.issuer=https://www.jhipster.tech
jhipster.security.authentication.jwt.token-validity-in-seconds=86400
jhipster.security.authentication.jwt.token-validity-in-seconds-for-remember-me=2592000
jhipster.mail.base-url=http://127.0.0.1:8080
jhipster.info.swagger.enable=true

quarkus.http.auth.permission.public.paths=/api/authenticate,/api/register,/api/activate,/api/account/reset-password/init,/api/account/reset-password/finish,/management/health,/management/info,/management/prometheus
quarkus.http.auth.permission.public.policy=permit
<%_ } _%>
<%_ if(!skipUserManagement) { _%>

quarkus.http.auth.policy.admin-role.roles-allowed=ROLE_ADMIN
quarkus.http.auth.permission.admin.paths=/api/users,/management/**
quarkus.http.auth.permission.admin.policy=admin-role

quarkus.http.auth.policy.user-role.roles-allowed=ROLE_USER
quarkus.http.auth.permission.user.paths=/api/**
quarkus.http.auth.permission.user.policy=user-role
<%_ } _%>


<%_ if(httpRootPath) { _%>
quarkus.http.root-path=/<%= httpRootPath %>
<%_ } _%>

<%_ if(httpRootPath) { _%>
quarkus.smallrye-openapi.path=/<%= httpRootPath %>v2/api-docs
quarkus.swagger-ui.path=/<%= httpRootPath %>swagger-ui
<%_ } else { _%>
quarkus.smallrye-openapi.path=/v2/api-docs
quarkus.swagger-ui.path=/swagger-ui
<%_ } _%>
quarkus.swagger-ui.always-include=true

quarkus.native.additional-build-args=\
<%_ if (authenticationType === 'jwt') { _%>
    -H:ResourceConfigurationFiles=resources-config.json,\
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    -H:ReflectionConfigurationResources=reflect-config-mongo.json,\
<%_ } _%>
    --initialize-at-run-time=<%= packageName %>.security.RandomUtil
<%if (buildTool === 'gradle') { _%>

# Docker image build properties, for more information https://quarkus.io/guides/container-image
# If you want to change the default group and name value, please check the dedicated documentation here https://quarkus.io/guides/container-image#quarkus-container-image_quarkus.container-image.group
# quarkus.container-image.group=
# quarkus.container-image.name=<%= baseName %>
quarkus.container-image.tag=latest
<%_ } _%>
<%_ if (jvmArguments) { _%>
quarkus.jib.jvm-arguments=<%= jvmArguments %>
<%_ } _%>
<%_ if (nativeArguments) { _%>
quarkus.jib.native-arguments=<%= nativeArguments %>
<%_ } _%>

<%if (authenticationType === 'oauth2') { _%>
# OAuth 2.0 and OIDC
quarkus.oidc.enabled=true
quarkus.oidc.auth-server-url=http://localhost:9080/auth/realms/jhipster/
%dev.quarkus.oidc.client-id=web_app
%dev.quarkus.oidc.credentials.secret=web_app
quarkus.oidc.application-type=hybrid
quarkus.oidc.authentication.scopes=profile,address,email,address,phone,offline_access
quarkus.oidc.authentication.cookie-path=/
quarkus.oidc.authentication.redirect-path=/login/oauth2/code/oidc
quarkus.oidc.authentication.restore-path-after-redirect=false

jhipster.oidc.logout-url=http://localhost:9080/auth/realms/jhipster/protocol/openid-connect/logout

%test.quarkus.oidc.client-id=dummy
%test.quarkus.oidc.application-type=service
%test.jhipster.oidc.logout-url=some-dummy-logoutUrl
<%_ } _%>

<%_ if (kubernetes.createKubernetesConfiguration) { _%>
    <%_ if (kubernetes.namespace) { _%>
quarkus.kubernetes.namespace=<%= kubernetes.namespace %>
    <%_ } _%>
    <%_ if (kubernetes.imagePullSecrets) { _%>
quarkus.kubernetes.image-pull-secrets=<%= kubernetes.imagePullSecrets %>
    <%_ } _%>
    <%_ if (kubernetes.imageRegistry) { _%>
quarkus.container-image.registry=<%= kubernetes.imageRegistry %>
    <%_ } _%>
    <%_ if (kubernetes.imageGroup) { _%>
quarkus.container-image.group=<%= kubernetes.imageGroup %>
    <%_ } _%>
    <%_ if (kubernetes.imageName) { _%>
quarkus.container-image.name=<%= kubernetes.imageName %>
    <%_ } _%>
quarkus.container-image.additional-tags=latest

<%_ if (kubernetes.kubernetesProperties) { _%>
    <%_ Object.keys(kubernetes.kubernetesProperties).forEach(function(key) { _%>
<%= key %>=<%= kubernetes.kubernetesProperties[key] %>
    <%_ }); _%>
<%_ } _%>
    <%_ if (kubernetes.kubernetesEnvironmentVariables) { _%>
        <%_ Object.keys(kubernetes.kubernetesEnvironmentVariables).forEach(function(key) { _%>
quarkus.kubernetes.env.vars.<%= key %>=<%= kubernetes.kubernetesEnvironmentVariables[key] %>
        <%_ }); _%>
    <%_ } _%>

    <%_ if (kubernetes.kubernetesConfigMapping) { _%>
        <%_ kubernetes.kubernetesConfigMapping.forEach(function(config) { _%>
quarkus.kubernetes.env.mapping.<%= config.variableName %>.from-configmap=<%= config.configName %>
quarkus.kubernetes.env.mapping.<%= config.variableName %>.with-key=<%= config.configFieldName %>
        <%_ }); _%>
    <%_ } _%>

    <%_ if (kubernetes.kubernetesSecretsMapping) { _%>
        <%_ kubernetes.kubernetesSecretsMapping.forEach(function(secret) { _%>
quarkus.kubernetes.env.mapping.<%= secret.variableName %>.from-secret=<%= secret.secretName %>
quarkus.kubernetes.env.mapping.<%= secret.variableName %>.with-key=<%= secret.secretFieldName %>
        <%_ }); _%>
    <%_ } _%>
<%_ } _%>
